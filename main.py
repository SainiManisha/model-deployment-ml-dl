# -*- coding: utf-8 -*-
"""Copy of Copy of Deployment of Deep Learning and Machine Learning
Model_FLASK_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uZaNqb4Ugj1wNxixz9gcWKyVU3Hee1b0
"""

from flask import Flask, request

import joblib
import pandas as pd

import torch
import torchvision

import base64

import tensorflow as tf
from tensorflow.keras.applications.resnet50 import (
    ResNet50,
    preprocess_input,
    decode_predictions,
)

import detectron2
from detectron2.utils.logger import setup_logger
# import some common detectron2 utilities
from detectron2 import model_zoo
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog


app = Flask(__name__)


@app.route("/", methods=["GET"])
def index():
    x = """
    <h1> Model Deployment </h1>
    <img src="https://upload.wikimedia.org/wikipedia/commons/3/3c/Flask_logo.svg" alt="alternatetext" width="300" height="300">
    <body style="background-color:powderblue;">
    <ul>
    <li> <a href='/ml'>ML prediction</a> </li>
    <li> <a href='/dl'>DL Prediction</a> </li>
    <li> <a href='/dl_obj'>DL object detection</a> </li>
    </ul>
    <!--<iframe width="560" height="315" src="https://www.youtube.com/embed/6WruncSoCdI" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>-->
    """
    return x


"""# ML Model"""


@app.before_first_request
def load_ml_model_to_app():
    app.ml_model = joblib.load("./linear_regression_boston_model.pkl")


@app.route("/ml")
def ml():
    x = """
    <!doctype html>
    <title>ML Form</title>
    <img src="https://upload.wikimedia.org/wikipedia/commons/3/3c/Flask_logo.svg" alt="alternatetext" width="300" height="300">
    <body style="background-color:powderblue;">
    <form method=post action='/ml/submit'>
        <input name=CRIM placeholder='per capita crime rate by town'><br>
        <input name=ZN placeholder='proportion of residential land zoned for lots over 25,000 sq.ft'><br>
        <input name=INDUS placeholder='proportion of non-retail business acres per town'><br>
        <input name=CHAS placeholder='Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)'><br>
        <input name=NOX placeholder='nitric oxides concentration (parts per 10 million)'><br>
        <input name=RM placeholder='average number of rooms per dwelling'><br>
        <input name=AGE placeholder='proportion of owner-occupied units built prior to 1940'><br>
        <input name=DIS placeholder='weighted distances to five Boston employment centres'><br>
        <input name=RAD placeholder='index of accessibility to radial highways'><br>
        <input name=TAX placeholder='full-value property-tax rate per $10,000'><br>
        <input name=PTRATIO placeholder='pupil-teacher ratio by town'><br>
        <input name=B placeholder='1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town'><br>
        <input name=LSTAT placeholder='% lower status of the population'><br>
        <input type=submit value=Predict>
    </form>
    """
    return x


@app.route("/ml/submit", methods=["POST"])
def ml_submit():
    column_names = [
        "CRIM",
        "ZN",
        "INDUS",
        "CHAS",
        "NOX",
        "RM",
        "AGE",
        "DIS",
        "RAD",
        "TAX",
        "PTRATIO",
        "B",
        "LSTAT",
    ]
    data = {}
    for key in column_names:
        data[key] = [float(request.form[key])]
    print(data)

    df = pd.DataFrame.from_dict(data)
    price = app.ml_model.predict(df)
    print(price)

    return (
        """<!doctype html>
    <title>BOSTON ML PREDICTION</title>
    <img src="https://upload.wikimedia.org/wikipedia/commons/3/3c/Flask_logo.svg" alt="alternatetext" width="300" height="300">
    <body style="background-color:powderblue;">
    Predicted price of home is: """
        + "<b>"
        + str(price[0])
        + "</b>"
        + """<br><a href='/'>Go Back</a>"""
    )


"""# DL Model"""


@app.before_first_request
def load_dl_model_to_app():
    app.dl_model = ResNet50(weights="imagenet")


@app.route("/dl")
def dl():
    x = """
    <!doctype html>
    <title>DL Form</title>
    <h1>Upload new File</h1>
    <img src="https://upload.wikimedia.org/wikipedia/commons/3/3c/Flask_logo.svg" alt="alternatetext" width="300" height="300">
    <body style="background-color:powderblue;">
    <form method=post action='/dl/submit' enctype='multipart/form-data'>
        <input name=image type=file placeholder='image'><br>
        <input type=submit value=Predict>
    </form>
    """
    return x


@app.route("/dl/submit", methods=["POST"])
def dl_submit():
    img = request.files["image"]
    img.save("./myimage")

    image = tf.image.decode_image(tf.io.read_file("./myimage"))
    image = tf.image.resize(image, [224, 224])
    pre_image = preprocess_input(image)
    # make as 4D
    pre_image = pre_image[None, ...]

    b = tf.image.decode_image(tf.io.read_file("./myimage"))
    jpeg = tf.image.encode_jpeg(b)
    b = base64.b64encode(jpeg.numpy()).decode("utf-8")

    probas = app.dl_model.predict(pre_image)
    x = decode_predictions(probas, top=5)
    print(x)

    x = [(i[1], i[2] * 100) for i in x[0]]

    return (
        f"""<!doctype html>
    <title>ResNet50 Image Prediction</title>
    <img src="https://upload.wikimedia.org/wikipedia/commons/3/3c/Flask_logo.svg" alt="alternatetext" width="200" height="200">
    <body style="background-color:powderblue;">
    Predicted class image is (with probability): <b>{x}</b> <br>
    <img src='data:image/jpeg;base64,{b}'>
    """
        + """<br><a href='/'>Go Back</a>"""
    )


"""# DL Object Detection




"""

# You may need to restart your runtime prior to this, to let your installation take effect
# Some basic setup:
# Setup detectron2 logger

setup_logger()

cfg = get_cfg()
cfg.MODEL.DEVICE = "cpu"
# add project-specific config (e.g., TensorMask) here if you're not running a model in detectron2's core library
cfg.merge_from_file(
    model_zoo.get_config_file("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml")
)
cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5  # set threshold for this model
# Find a model from detectron2's model zoo. You can use the https://dl.fbaipublicfiles... url as well
cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url(
    "COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml"
)
predictor = DefaultPredictor(cfg)


@app.route("/dl_obj")
def dl_obj():
    x = """
    <!doctype html>
    <title>DL object detection Form</title>
    <h1>Upload new File</h1>
    <img src="https://upload.wikimedia.org/wikipedia/commons/3/3c/Flask_logo.svg" alt="alternatetext" width="300" height="300">
    <body style="background-color:powderblue;">
    <form method=post action='/dl_obj/submit' enctype='multipart/form-data'>
        <input name=image type=file placeholder='image'><br>
        <input type=submit value=detect>
    </form>
    """
    return x


@app.route("/dl_obj/submit", methods=["POST"])
def dl_obj_submit():
    img = request.files["image"]
    img.save("./myimage")

    image = tf.image.decode_image(tf.io.read_file("./myimage")).numpy()

    # prediction...
    outputs = predictor(image)
    v = Visualizer(
        image[:, :, ::-1], MetadataCatalog.get(cfg.DATASETS.TRAIN[0]), scale=1.2
    )
    out = v.draw_instance_predictions(outputs["instances"].to("cpu"))
    out_image = out.get_image()[:, :, ::-1]

    jpeg = tf.image.encode_jpeg(out_image)
    b = base64.b64encode(jpeg.numpy()).decode("utf-8")

    return (
        f"""<!doctype html>
    <title>Detectron2 Object Detection</title>
    <img src="https://upload.wikimedia.org/wikipedia/commons/3/3c/Flask_logo.svg" alt="alternatetext" width="200" height="200">
    <body style="background-color:powderblue;">
    <img src='data:image/jpeg;base64,{b}'>
    """
        + """<br><a href='/'>Go Back</a>"""
    )


"""# Run Web Server"""

if __name__ == "__main__":
    app.run()
